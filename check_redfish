#!/usr/bin/env python
import requests
import json
import argparse
import sys
import os
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()


class DM_redfish():
    """Platform dependent variables"""
    # pylint: disable=too-many-instance-attributes
    # As a defines class this will need all the attributes
    def __init__(self, args):
         self._oemhp = "Hpe"
         self._oempath = "/Oem/Hpe"
         self._startpath = "/redfish/v1/"
         self._sessionpath = "/redfish/v1/SessionService/Sessions/"
         self.check_battery_wetness = "/usr/local/nrpe/enable_controller_warnings"
         self.component = None
         self._systempath = None
         self._managerpath = None
         iLO_host = "https://bbxplayer-22.oob.dc3.dailymotion.com"
         self.ILO_comp_list= ("Cpu", "Memory", "storage", "SmartStorageBattery", "Temperatures")
         ILO_login_account = "root"
         ILO_login_password = "asdfg90p"
         self._headers = {"Content-type": "application/json;charset=utf-8",
         "Accept": "application/json;charset=utf-8",
         "OData-Version": "4.0"
         }
         self.data = {"UserName": ILO_login_account, "Password": ILO_login_password}
         self.Token = self.ILO_session_management(iLO_host, ILO_login_account, ILO_login_password, "post")
         self._headers_add = {"X-Auth-Token": self.Token}
         self._headers_token = self._headers.update(self._headers_add)

        #ARGS
         if args.cpu:
             self.component = "Processors"
         elif args.memory:
             self.component = "Memory"
         elif args.temp:
             self.component = "Temperatures"
         elif args.storage:
             self.component = "Storage"
         elif args.fan:
             self.component = "Fans"

         self.health = self.ILO_components_health(iLO_host, ILO_login_account, ILO_login_password, self.component)
         if os.path.isfile(self.check_battery_wetness):
             self.battery_health = self.ILO_components_health(iLO_host, ILO_login_account, ILO_login_password, "SmartStorageBattery")
         self.ILO_check_status(iLO_host, ILO_login_account, ILO_login_password, self.component, self.health)

    def ILO_session_management(self, host, login, password, action):
        url = host + self._sessionpath
        try:
            if action == "post":
                r = requests.post(url ,data=json.dumps(self.data), headers=self._headers, verify=False)
            elif action == "delete":
                if self.Token:
                    location = self.ILO_get_session_location(self.Token, host, login, password)
                    if location:
                        url = host + location
                        r = requests.delete(url ,data=json.dumps(self.data), headers=self._headers, verify=False)
                        if r.status_code != 200:
                            print("Error : failed to DELETE session : {}".format(location))
                            sys.exit(3)
            else:
                print("MethodNotSupported")
        except requests.exceptions.RequestException as exception:
            print(exception)
            sys.exit(1)
        else:
           if action == "post" and not "Created" in r.content:
               print("Error : failed to create new session")
               sys.exit(3)
           rc = r.status_code
           if 200 <= rc <= 299:
               if "Created" in r.content:
                   ILO_token = r.headers["X-Auth-Token"]
                  # ILO_session.location = r.headers["Location"]
                   return(ILO_token)
           elif 400 <= rc <= 499:
               if rc == "401":
                   print("InvalidCredentialsError")
               elif rc == 400:
                   print("ReachIloSessionsMax")
               else:
                   print("ClientError")
               sys.exit(3)
           elif 500 <= rc <= 599:
               print("ServerError")
               sys.exit(3)
           else:
               print("InvalidSession")
               sys.exit(3)
        return None

    def ILO_components_health(self, host, login, password, component):
        url = host + self._startpath
        r = requests.get(url ,data=json.dumps(self.data), headers=self._headers, verify=False)
        output = r.json()
        for key, value in output.items():
            if key == "Systems":
                self._systempath = (value["@odata.id"])
        if self._systempath:
            url = host + self._systempath + "1/"
            r = requests.get(url, headers=self._headers, verify=False)
            output = r.json()
            for key, value in output['Oem'][self._oemhp]['AggregateHealthStatus'][component]["Status"].items():
                health = value
                return(health)

    def ILO_check_status(self, host, login, password, component, component_health):
        health = component_health
        if component == "Storage" and os.path.isfile(self.check_battery_wetness) and self.battery_health:
            if health == "OK" and self.battery_health =="OK":
                print("{} is OK".format(component))
            elif health == "OK" and self.battery_health =="Warning":
                print("{} is WARNING : Battery need attention".format(component))
                sys.exit(1)
            elif health == "OK" and self.battery_health =="Critical":
                print("{} is CRITICAL : Battery need attention".format(component))
                sys.exit(3)
            elif health == "Warning" or  health == "Critical":
                print("{} is CRITICAL".format(component))
                sys.exit(3)
        if component_health:
            if component == "Processors":
                component = "CPU"
            if health == "OK":
                print("{} is OK".format(component))
            elif health == "Warning":
                print("{} is WARNING".format(component))
                sys.exit(1)
            else:
                print("{} is CRITICAL".format(component))
                sys.exit(3)
        self.ILO_session_management(host, login, password, "delete")

    def ILO_get_session_location(self, token, host, login, password):
        url = host + self._sessionpath
        r = requests.get(url ,data=json.dumps(self.data), headers=self._headers, verify=False)
        output = r.json()
        for key, value in output['Oem'][self._oemhp]['Links']["MySession"].items():
            ILO_session_location = value
            return (ILO_session_location)

def main():
    parser = argparse.ArgumentParser(
        description='check hardware',
        add_help=True
    )
    parser.add_argument('--cpu', action="store_true",
                        help='check cpu health')
    parser.add_argument('--memory', action="store_true",
                        help='check memory health')
    parser.add_argument('--fan', action="store_true",
                        help='check fans health')
    parser.add_argument('--temp', action="store_true",
                        help='check temperature')
    parser.add_argument('--power', action="store_true",
                        help='check power supply health')
    parser.add_argument('--storage', action="store_true",
                        help='check LD/PD/RAID health')
    args = parser.parse_args()
    DM_redfish(args)
if __name__ == '__main__':
    main()
                                                                                                                                                                                                                                                                                                                                                                                
~                                                                           
